{
    "workbench.colorTheme": "Default Dark+",
    "[latex]": {
        "editor.formatOnPaste": false,
        "editor.suggestSelection": "recentlyUsedByPrefix"
    },
    "security.workspace.trust.untrustedFiles": "open",
    "vim.vimrc.path": "C:\\Users\\mmdkzm\\AppData\\Roaming\\Code\\User\\.vimrc",
    "python.defaultInterpreterPath": "C:\\Users\\mmdkzm\\AppData\\Local\\Programs\\Python\\Python39\\python.exe",
    "python.languageServer": "Jedi",
    "files.autoSave": "afterDelay",
    "editor.unicodeHighlight.nonBasicASCII": false,
    "commentTranslate.targetLanguage": "fa",
    "editor.fontSize": 21,
    "vscodeGoogleTranslate.preferredLanguage": "English",
    "editor.wordWrap": "on",
    "workbench.iconTheme": "material-icon-theme",
    "[dart]": {
        "editor.formatOnSave": true,
        "editor.formatOnType": true,
        "editor.rulers": [
            80
        ],
        "editor.selectionHighlight": false,
        "editor.suggest.snippetsPreventQuickSuggestions": false,
        "editor.suggestSelection": "first",
        "editor.tabCompletion": "onlySnippets",
        "editor.wordBasedSuggestions": false
    },
    // #################################################
    // ### mohammad vscode vim configurations        ###
    // #################################################
    // // scoop bucket add im-select https://github.com/daipeihust/im-select
    // // scoop install im-select
    // // switch keyboard input method in normal mode
    // // https://www.science.co.il/language/Locale-codes.php
    // // local || language code || lcid string || lcid hexadecimal || codepage
    // // Farsi - Persian         ||	fa||	fa ||	1065 ||	429 ||	1256 ||
    // // English - United States ||	en ||	en-us||	1033||	409 ||	1252 ||
    // "vim.autoSwitchInputMethod.enable": true,
    // "vim.autoSwitchInputMethod.defaultIM": "1033",
    // // configuration in windows
    // "vim.autoSwitchInputMethod.obtainIMCmd": "C:\\Users\\mmdkzm\\scoop\\apps\\im-select\\1.0.1\\im-select.exe",
    // "vim.autoSwitchInputMethod.switchIMCmd": "C:\\Users\\mmdkzm\\scoop\\apps\\im-select\\1.0.1\\im-select.exe 1065",
    // // configuration in linux 
    // // configuration in mac 
    // // ##################################################################
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.leader": "<space>",
    "vim.surround": true,
    "vim.sneak": true,
    "vim.camelCaseMotion.enable": true,
    "vim.enableNeovim": true,
    // windows neovim path 
    "vim.neovimPath": "C:\\Users\\mmdkzm\\scoop\\apps\\neovim\\0.7.0\\bin\\nvim",
    // linux neovim path 
    // "vim.neovimPath": "",
    "vim.insertModeKeyBindings": [
        {
            "before": [
                "j",
                "j"
            ],
            "after": [
                "<Esc>"
            ]
        },
        {
            "before": [
                "j",
                "k"
            ],
            "after": [
                "<Esc>"
            ]
        }
    ],
    "vim.handleKeys": {
        "<C-a>": false,
        "<C-f>": false,
        "<C-w>": true,
    },
    "vim.normalModeKeyBindingsNonRecursive": [
        // {
        //     "before": [
        //         "<space>"
        //     ],
        //     "commands": [
        //         "whichkey.show"
        //     ]
        // },
        {
            "before": [
                "<C-n>"
            ],
            "commands": [
                ":nohl"
            ]
        },
        {
            "before": [
                "K"
            ],
            "commands": [
                "lineBreakInsert"
            ],
            "silent": true
        },
    ],
    "vim.normalModeKeyBindings": [
        // {
        //     "before": [
        //         ":"
        //     ],
        //     "commands": [
        //         "workbench.action.showCommands",
        //     ],
        //     "silent": true
        // },
        {
            "before": [
                "<leader>",
                "m"
            ],
            "commands": [
                "bookmarks.toggle"
            ]
        },
        {
            "before": [
                "<leader>",
                "b"
            ],
            "commands": [
                "bookmarks.list"
            ]
        },
        // format code mohammad
        {
            "before": [
                "<leader>",
                "f",
                "c"
            ],
            "commands": [
                "editor.action.formatDocument"
            ]
        },
        // ############################################
        // ###  this is my debugging configuration  ###
        // ############################################
        // debug stop mohammad
        {
            "before": [
                "<leader>",
                "d",
                "s"
            ],
            "commands": [
                "workbench.action.debug.stop"
            ],
            "when": [
                "inDebugMode && !focusedSessionIsAttach"
            ]
        },
        // debug restart mohammad
        {
            "before": [
                "<leader>",
                "d",
                "s"
            ],
            "commands": [
                "workbench.action.debug.restart"
            ],
            "when": [
                "inDebugMode"
            ]
        },
        // debug hot reload mohammad
        {
            "before": [
                "<leader>",
                "d",
                "r"
            ],
            "commands": [
                "dart.hotReload"
            ],
            "when": [
                "inDebugMode && debugType == 'dart'"
            ]
        },
        // debug run mohammad
        // {
        //     "before": [
        //         "<leader>",
        //         "d",
        //         "r"
        //     ],
        //     "commands": [
        //         "debuggersAvailable && debugState != 'initializing'"
        //     ]
        // },
        // debug step over mohammad
        {
            "before": [
                "<leader>",
                "d",
                "s",
                "o"
            ],
            "commands": [
                "workbench.action.debug.stepOver"
            ],
            "when": [
                "debugState == 'stopped'"
            ]
        }
        // Debug: Step Out
        ,
        {
            "before": [
                "<leader>",
                "d",
                "s",
                "o",
                "t"
            ],
            "commands": [
                "workbench.action.debug.stepOut"
            ],
            "when": [
                "debugState == 'stopped'"
            ]
        }
        // Debug: Step Into
        ,
        {
            "before": [
                "<leader>",
                "d",
                "s",
                "i"
            ],
            "commands": [
                "workbench.action.debug.stepInto"
            ],
            "when": [
                "debugState != 'inactive'"
            ]
        }
        // Debug: step back
        ,
        {
            "before": [
                "<leader>",
                "d",
                "s",
                "o"
            ],
            "commands": [
                "workbench.action.debug.stepBack"
            ],
            "when": []
        },
        // add to watch 
        {
            "before": [
                "<leader>",
                "d",
                "a",
            ],
            "commands": [
                "editor.debug.action.selectionToWatch"
            ]
        },
        // pickle watch list 
        // {
        //     "before": [
        //         "<leader>",
        //         "d",
        //         "",
        //     ],
        //     "command": 
        // },
        // load pickles to ..... (should think about that)
        // toggle breakpoint
        // add to watch expression
        {
            "before": [
                "<leader>",
                "d",
                "a",
                "e"
            ],
            "commands": [
                "debug.addToWatchExpressions"
            ]
        },
        // set watch expression
        {
            "before": [
                "<leader>",
                "d",
                "a",
                "e",
                "e"
            ],
            "commands": [
                "debug.setWatchExpression"
            ]
        },
        // Debug: Toggle Breakpoint
        {
            "before": [
                "<leader>",
                "d",
                "t",
            ],
            "commands": [
                "editor.debug.action.toggleBreakpoint"
            ],
            "when": [
                "debuggersAvailable && editorTextFocus"
            ]
        },
        // Toggle Activate Breakpoints
        {
            "before": [
                "<leader>",
                "d",
                "t",
                "t",
            ],
            "commands": [
                "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction"
            ]
        },
        // Debug: Inline Breakpoint
        {
            "before": [
                "<leader>",
                "d",
                "t",
                "t",
                "t",
            ],
            "commands": [
                "editor.debug.action.toggleInlineBreakpoint"
            ],
            "when": [
                "editorTextFocus"
            ]
        },
        // Debug: Go to Next Breakpoint
        {
            "before": [
                "<leader>",
                "d",
                "g",
                "n",
                "b"
            ],
            "commands": [
                "editor.debug.action.goToNextBreakpoint"
            ]
        },
        // Debug: Go to Previous Breakpoint
        {
            "before": [
                "<leader>",
                "d",
                "g",
                "p",
                "b"
            ],
            "commands": [
                "editor.debug.action.goToPreviousBreakpoint"
            ]
        },
        // go to next problem in files
        {
            "before": [
                "<leader>",
                "d",
                "shift",
                "p"
            ],
            "commands": [
                "editor.action.marker.nextInFiles"
            ],
            "when": "editorFocus"
        },
        // go to Previous problem in files
        {
            "before": [
                "<leader>",
                "d",
                "shift",
                "P"
            ],
            "commands": [
                "editor.action.marker.prevInFiles"
            ],
            "when": "editorFocus"
        },
        // go to next problem
        {
            "before": [
                "<leader>",
                "d",
                "p"
            ],
            "commands": [
                "editor.action.marker.next"
            ],
            "when": "editorFocus"
        },
        // go to Previous problem
        {
            "before": [
                "<leader>",
                "d",
                "P"
            ],
            "commands": [
                "editor.action.marker.prev"
            ],
            "when": "editorFocus"
        },
        // quick fix navigation problem 
        // install keyboard-quickfix extention
        {
            "before": [
                "<leader>",
                "."
            ],
            "commands": [
                "keyboard-quickfix.openQuickFix"
            ],
            // "when": "editorFocus"
        },
        // {
        //     "before": [
        //         "ctrl+j",
        //     ],
        //     "commands": [
        //         "keyboard-quickfix.quickOpenSelectNext"
        //     ],
        //     "when": "keyboard-quickfix.openQuickFix"
        // },
        // {
        //     "before": [
        //         "ctrl+k",
        //     ],
        //     "commands": [
        //         "workbench.action.quickOpenSelectPrevious"
        //     ],
        //     "when": "keyboard-quickfix.openQuickFix"
        // },
        // This works for the autocomplete menu very well (I use alt-j/k, but works great), however it doesn't work with the quick fix menu. For that you need the keyboard quickfix extension 
        // {
        //     "before": [
        //         "ctrl+k",
        //     ],
        //     "commands":["selectPrevSuggestion"],
        //     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
        // },
        // {
        //     "before": [
        //         "ctrl+j",
        //     ],
        //     "commands":["selectNextSuggestion"],
        //     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
        // }
        // show documentaion hover  its implemented in vscode-vim : gh
        // {
        //     "before": [
        //         "<leader>",
        //         "s", // show 
        //         "d", // documention
        //     ],
        //     "commands":["editor.action.showHover"],
        //     "when": "editorTextFocus"
        // },
        // todo: scroll top margin: https://github.com/Microsoft/vscode/issues/12048
        // todo: https://github.com/VSCodeVim/Vim/issues/1427
        // todo: https://github.com/microsoft/vscode/issues/69836
        // Debug: Show Hover  
        {
            "before": [
                "<leader>",
                "d", // debug 
                "s", // show 
                "d", // documention
            ],
            "commands": [
                "editor.action.showHover"
            ],
            "when": "editorTextFocus"
        },
        // Show Definition Preview Hover
        {
            "before": [
                "<leader>",
                "s", // show 
                "d", // documention
                // "m", // more
            ],
            "commands": [
                "editor.action.showDefinitionPreviewHover"
            ],
            "when": "editorTextFocus"
        },
        // Todo: hover navigation : https://github.com/microsoft/vscode/issues/69836#issuecomment-1053947226
        // Todo: implement this navigations : https://code.visualstudio.com/docs/editor/editingevolved
        // select flutter widget 
        {
            "before": [
                "<leader>",
                "s", // select 
                "f", // flutter
                "w", // widget
            ],
            "after": [
                "v",
                "i",
                "w",
                "l",
                "%",
            ]
        },
        // anki card snippet
        {
            "before": [
                "<leader>",
                "a", // add
                "c", // card
            ],
            "after": [
                "i",
                "#",
                "#",
                "\n",
                "`",
                "`",
                "`",
                // dart
                // "d", "a", "r", "t",
                // text
                "t",
                "e",
                "x",
                "t",
                // sql
                // python
                "\n",
                "\n",
                "`",
                "`",
                "`",
            ]
        },
        // todo: shortcut key for copy problem error to clipboard and search in google
        //  wrap "" around char
        {
            "before": [
                "<leader>",
                "z",
                "z"
            ],
            "after": [
                "v",
                "S",
                "\"",
                "a",
                ",",
                "<Esc>",
                "l",
            ]
        },
        {
            "before": [
                "<leader>",
                "a",
                "a"
            ],
            "after": [
                "/",
                "^",
                "[",
                "^",
                "#",
                "]",
                "CR",
                "V",
                "/",
                "#",
                "#",
                "CR",
                "k",
                "<leader>",
                "w",
                "w",
                "/",
                "#",
                "#",
                "CR",
            ]
        },
        // next line paste
        {
            "before": [
                "<leader>",
                "v",
            ],
            "after": [
                "o",
                "<ESC>",
                "p"
            ]
        },
        // adding one word anki cloze
        {
            "before": [
                "<leader>",
                "o"
            ],
            "after": [
                "v",
                "i",
                "w",
                "c",
                "{",
                "{",
                "c",
                "1",
                ":",
                "}",
                "}",
                "<Esc>",
                "h",
                "P",
                "e",
                "e",
            ]
        },
        // todo : create table
        {
            "before": [
                "<leader>",
                "t"
            ],
            "after": [
                "i","/","/"," ","t","o","d","o",":"," ","c","r","e","a","t","e"," ","t","a","b","l","e","<ESC>"
            ]
        }
    ],
    "vim.visualModeKeyBindings": [
        {
            "before": [
                ">"
            ],
            "commands": [
                "editor.action.indentLines"
            ]
        },
        {
            "before": [
                "<"
            ],
            "commands": [
                "editor.action.outdentLines"
            ]
        },
        // adding anki cloze 
        {
            "before": [
                "<leader>",
                "w"
            ],
            "after": [
                "c",
                "{",
                "{",
                "c",
                "1",
                ":",
                "}",
                "}",
                "<Esc>",
                "h",
                "P"
            ]
        },
        // card wrap 
        {
            "before": [
                "<leader>",
                "w",
                "c"
            ],
            "after": [
                "c",
                "%",
                "\n",
                "`",
                "`",
                "`",
                // python
                // "p", "y", "t", "h", "o", "n",
                // start sql
                // "s","q","l",
                // dart
                // "d","a","r","t",
                // text
                "t",
                "e",
                "x",
                "t",
                "\n",
                "`",
                "`",
                "`",
                "<Esc>",
                "h",
                "P"
            ]
        },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        // {
        //     "before": [
        //         "<space>"
        //     ],
        //     "commands": [
        //         "whichkey.show"
        //     ]
        // }
    ],
    // #################################################
    // ### mohammad vscode vim configurations        ###
    // #################################################
    "git.autofetch": true,
    "editor.lineNumbers": "relative",
    "vim.vimrc.enable": true,
    "files.exclude": {
        "**/.git": false,
        "// **/.git": true
    },
    "commitReminder.interval": 5,
    "commitReminder.intervalUnit": "minutes",
    "editor.cursorSurroundingLines": 30,
    "[json]": {
        "editor.quickSuggestions": {
            "strings": true
        },
        "editor.suggest.insertMode": "replace",
        "gitlens.codeLens.scopes": [
            "document"
        ]
    },
    // Avoid duplicate clips in the list
    "clipboard-manager.avoidDuplicates": true,
    // Time in milliseconds to check changes in clipboard. Set zero to disable.
    "clipboard-manager.checkInterval": 500,
    // Maximum clipboard size in bytes.
    "clipboard-manager.maxClipboardSize": 1000000,
    // Maximum number of clips to save in clipboard
    "clipboard-manager.maxClips": 100,
    // Move used clip to top in the list
    "clipboard-manager.moveToTop": false,
    // Get clips only from VSCode
    "clipboard-manager.onlyWindowFocused": false,
    // View a preview while you are choosing the clip
    "clipboard-manager.preview": true,
    // Set location to save the clipboard file, set false to disable
    "clipboard-manager.saveTo": null,
    // Enable completion snippets
    "clipboard-manager.snippet.enabled": true,
    // Maximum number of clips to suggests in snippets (Zero for all)
    "clipboard-manager.snippet.max": 10,
    // Default prefix for snippets completion (clip1, clip2, ...)
    "clipboard-manager.snippet.prefix": "clip",
    "editor.minimap.enabled": false,
    "window.menuBarVisibility": "compact",
    // put cursor surrounding lines to high number so cursor keep in center of screen
}